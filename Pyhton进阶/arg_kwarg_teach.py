# -*- coding:utf-8 -*-
# @文件名  :kwarg_test.py
# @时间    :2022/1/30 12:41
# @作者    :jie
# @目的
def tes(a=None, b=111, c=None, d=222, e=None, f=None, *args, **kwargs):
    # kwargs['a'] = a
    # kwargs['b'] = b
    # kwargs['c'] = c
    # kwargs['d'] = d
    # kwargs['e'] = e
    # kwargs['f'] = f
    print('a:', a)
    print('b:', b)
    print('c:', c)
    print('d:', d)
    print('e:', e)
    print('f:', f)
    pass


# 一.*args,**kwargs的思想:
#   1.封装性:对于参数量比较多的情况下，提前封装好为一个元组或者字典，再传入，而不是以暴露一个个单独的参数的方式传入。
#   2.减少重复:封装的另一个作用就是把重复部分打包为一个整体，传入这个整体，对于个性化传入参数部分可以单独暴露式传入
# 二.*args,**kwargs的作用:不需要每次都以a=1,b=2,...,x=n的方式手动传入参数，
# 尤其是对同样的函数有相当大的一部分都是重复参数的情况。
# 对于一些按顺序排好的参数，可以用元组的方式提前封装好， 通过*args传入
# 对于非顺序排好的参数，也可以用字典的方式提前封装好，通过**kwargs传入
# 三.默认传参,常规传参,*args,**kwargs四者之间的关系:
#   1.默认参数被覆盖:某个参数只有在常规传参，*args,**kwargs都未赋值的情况下才会被使用，否则只要出现一个默认参数就会被覆盖
#   2.常规传参，*args,**kwargs互相冲突:每个参数手动赋值只能在三者中间出现一次，比如*arg中已经按顺序为a，b赋值，那么就不允许
# 手动赋值a=1,b=2，**kwargs中也不允许出现{'a':1,'b':2}



param = {
    # 'a': 1,
    # 'b': 2,
    'c': 3,
    'd': 4,
    # 'e': 5,
    'f': 6
}
arg = (22, 33)
# 此处，只有e这一个参数需要个性化定制，其余部分用封装好的元组或者字典的方式传入
tes(*arg, **param,e='kkk')
print('-' * 30)
# 此处，相比较而言没有传入*arg，因此前两个参数用默认值（手动赋值也可以）
tes(e='hhh', **param)
